<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[sabre.io]]></title>
    <link href="http://sabre.io/atom.xml" rel="self"/>
    <link href="http://sabre.io/"/>
    <updated>2016-12-06T04:21:42+00:00</updated>
    <id>http://sabre.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[sabre/vobject 4.1.2 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-vobject-4.1.2-release"/>
            <updated>2016-12-13T04:19:17+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-vobject-4.1.2-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/vobject 4.1.2.</p>

<p>This release adds a few new features, and fixes several issues:</p>

<ol>
<li>Support for <code>BYWEEKDAY</code> and <code>BYWEEKNO</code> recurrences when <code>FREQ=YEARLY</code>.</li>
<li>Support for more Windows and Outlook 365 timezone ID's.</li>
<li>Fixing a problem with all-day events in the recurrence iterator.</li>
</ol>

<p>Upgrade sabre/vobject by running:</p>

<pre><code>composer update sabre/vobject
</code></pre>

<p>Full changelog can be found on <a href="https://github.com/fruux/sabre-vobject/blob/4.1.2/Changelog.md">Github</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/xml 2 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-xml-2.0.0-release"/>
            <updated>2016-11-16T05:58:46+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-xml-2.0.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/xml 2.0.0.  Just like the major sabre/uri and
sabre/event releases earlier, the main change is that we now require PHP 7
and use strict typing across the board.</p>

<p>For most people this upgrade should be seamless. The exception is if your
own code already opted-in to strict typing and you were sending incorrect
types to sabre/xml.</p>

<ul>
<li><a href="https://github.com/fruux/sabre-xml/blob/2.0.0/CHANGELOG.md">Changelog</a>.</li>
<li><a href="https://github.com/fruux/sabre-xml/releases">Release info</a>.</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/event 5 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-event-5.0.0-release"/>
            <updated>2016-10-23T19:24:04+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-event-5.0.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/event 5.0.0. This is only a month after the last major
release, but it's for a good reason.</p>

<p>We've made a change in how coroutines work. Co-routines, which are based on
generators were originally introduced in sabre/event for PHP 5.5.</p>

<p>At the time it was not possible for a PHP generator function to return
anything like this:</p>

<pre><code>function foo() {
    yield 1;
    return 2;
}
</code></pre>

<p>To work with this limitation in coroutines, we treated the last value that
was passed with <code>yield</code> as the "returned value".</p>

<p>Since PHP 7 it is possible to use <code>return</code> and the PHP Generator object has a
<code>getReturn()</code> method to access it.</p>

<p>We missed this in sabre/event 4, but it was quickly pointed out by Felix
Becker.</p>

<p>Using <code>return</code> makes so much sense now we can, it was worth making a BC break
for and releasing sabre/event 5 with the more sane behavior for PHP 7.</p>

<p>So today there's a sabre/event 5, and the only change is that if the previous
example of the generator function is used in the coroutine system, it will now
have <code>2</code> as its result instead of <code>1</code>.</p>

<ul>
<li><a href="https://github.com/fruux/sabre-event/blob/5.0.0/CHANGELOG.md">Changelog</a>.</li>
<li><a href="https://github.com/fruux/sabre-event/releases">Release info</a>.</li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/xml 1.5.0 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-xml-1.5.0-release"/>
            <updated>2016-10-09T23:04:39+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-xml-1.5.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/xml 1.5.0. This release puts the minimim PHP version at
PHP 5.5.</p>

<p>This release fixes an infinite loop bug during parsing of some invalid XML
documents, and contains an improvement in how we're dealing with the "context
stack", thanks to the PHP 5.5 <code>finally</code> keyword. Upgrading is recommended.</p>

<p>Upgrade sabre/xml by running:</p>

<pre><code>composer update sabre/xml
</code></pre>

<p>Full changelog can be found on <a href="https://github.com/fruux/sabre-xml/blob/1.5.0/CHANGELOG.md">Github</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/dav 2.1 End of life]]></title>
            <link href="http://sabre.io/blog/2016/sabre-dav-2.1-eol"/>
            <updated>2016-10-07T03:48:20+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-dav-2.1-eol</id>
            <content type="html"><![CDATA[<p>sabre/dav 2.1 is now "end of life". This means that no more bugs will be
fixed, including security bugs.</p>

<p>We've released one final release (<a href="https://github.com/fruux/sabre-dav/releases/tag/2.1.11">2.1.11</a>) with some last final tweaks,
but you're strongly urged to upgrade to at least 3.0, and preferably 3.2.</p>

<p>For more information about the support schedule, and for upgrade instructions,
check out the <a href="/dav/upgrading/">upgrading</a> page.</p>

<p>Because this is the last release to use the (relatively unpopular) sabre/http
3.x package, this also marks sabre/http 3.x as EOL.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/uri 2 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-uri-2.0.0-release"/>
            <updated>2016-10-07T02:55:41+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-uri-2.0.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/uri 2.0. The sole change in this package is that it now
requires PHP 7 and has typehints where appropriate. Upgrading should be
seamless.</p>

<p>Both 1.x and 2.x will be maintained and receive bugfixes.</p>

<p>To upgrade sabre/uri, make sure your <code>composer.json</code> requires "^2.0" for
sabre/uri and run <code>composer update</code>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/event 4 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-event-4.0.0-release"/>
            <updated>2016-09-20T02:42:15+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-event-4.0.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/event 4.0.0.</p>

<p>This release requires PHP 7, and has the following new features:</p>

<ul>
<li>PHP 7 typehints where they make sense, <code>strict_types</code> used everywhere.</li>
<li>Support for a new <code>WildcardEmitter</code> this Emitter has the same interface as
the regular <code>Emitter</code>, but it allows you to listen for events such as
<code>updated:*</code>, which would get triggered for any event that starts with
<code>updated:</code>.</li>
<li><code>EventEmitter</code>, <code>EventEmitterTrait</code> and <code>EventEmitterInterface</code> are renamed
to <code>Emitter</code>, <code>EmitterTrait</code> and <code>EmitterInterface</code>.</li>
<li>Promises now correctly handle PHP 7 <code>Trowable</code>.</li>
<li>Promises <em>must</em> now be rejected by an object implementing <code>Trowable</code>. In the
past it was possible to reject a Promise with any value (like Javascript),
but unlike Javascript, you can't throw a string in PHP. I felt that this
made the Promise a bit more predictable.</li>
</ul>

<h3 id="php-5.5">PHP 5.5</h3>

<p>sabre/event 3 will continue to be supported. I don't suspect new bugs will
appear there though, as it's a fairly simple package.</p>

<p>To upgrade sabre/event, make sure your <code>composer.json</code> requires "^4.0" for
sabre/event.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Baïkal 0.4.6 released]]></title>
            <link href="http://sabre.io/blog/2016/baikal-0.4.6-release"/>
            <updated>2016-08-19T13:12:50+00:00</updated>
            <id>http://sabre.io/blog/2016/baikal-0.4.6-release</id>
            <content type="html"><![CDATA[<p>We just released Baïkal 0.4.6. This release contains a fix that prevented
some users froms syncing contacts, if they were using the SQLite backend.</p>

<p>Upgrading is recommended.</p>

<p>Read the <a href="/baikal/upgrade/" title="Upgrade instructions">upgrade instructions here</a>. Full changelog can be found on <a href="https://github.com/fruux/Baikal/blob/0.4.6/CHANGELOG.md" title="Change log">Github</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/dav 3.2.0 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-dav-3.2.0-release"/>
            <updated>2016-06-28T02:41:55+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-dav-3.2.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/dav 3.2.0.
This is a major new version, and we're very excited to bring you features
we've been working on since last winter.</p>

<p>Highlights from this release:</p>

<ul>
<li>Support for <a href="http://www.php-fig.org/psr/psr-3/">PSR-3</a> for logging.</li>
<li>Full support for <a href="https://www.postgresql.org/">PostgreSQL</a>. We require version 9.5.</li>
<li>We're now supporting WebDAV resource sharing.</li>
<li>Calendar sharing now works out of the box!</li>
</ul>

<p>If you're curious, there's a much larger list of features on the
<a href="https://github.com/fruux/sabre-dav/blob/3.2.0/CHANGELOG.md">ChangeLog</a>. If you are upgrading from an older version, be sure to take
a look at the <a href="/dav/upgrade/3.1-to-3.2/">upgrade instructions</a>, as we've made a few backwards
compatibility breaks in order to support the new features.</p>

<p>To get started right away, you can find a zip on the <a href="https://github.com/fruux/sabre-dav/releases">releases</a> page.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Changes to sharing in sabre/dav 3.2]]></title>
            <link href="http://sabre.io/blog/2016/sharing-changes"/>
            <updated>2016-05-29T23:32:29+00:00</updated>
            <id>http://sabre.io/blog/2016/sharing-changes</id>
            <content type="html"><![CDATA[<p>We are currently working on sabre/dav 3.2. <a href="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/trunk/doc/Extensions/caldav-sharing.txt">A first beta has been released</a>.
This release includes major changes to the sharing system.</p>

<p>If you are a user of sabre/dav and have never done any deep modifications to
the sharing system, this simply means that from that version onward, there's
a new calendar sharing feature.</p>

<p>To take advantage of that feature, you can just upgrade and then turn on the
sharing plugin:</p>

<pre><code>$server-&gt;addPlugin(new Sabre\DAV\Sharing\Plugin());
</code></pre>

<p>And to allow Apple clients and BusyCal to modify the list of who can access
your calendar, add the following second plugin:</p>

<pre><code>$server-&gt;addPlugin(new Sabre\CalDAV\SharingPlugin());
</code></pre>

<p>Now if you're completely new to this, you can stop reading this article right
here. However, if you did stuff with sharing before, read on.</p>

<h2 id="the-old-situation">The old situation</h2>

<p>Preliminary support for sharing was added to sabre/dav in version 1.7, which
was released back in 2012. However, this release only ever shipped with the
interfaces to allow an implementor to write a custom backend for this.</p>

<p>There were only a few people that have actually done that. This guide is for
those people.</p>

<p>The specification we used back then were 2 apple proprietary specifications:</p>

<ol>
<li><a href="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/trunk/doc/Extensions/caldav-sharing.txt">caldav-sharing</a>.</li>
<li><a href="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/trunk/doc/Extensions/caldav-notifications.txt">caldav-notifications</a>.</li>
</ol>

<p>The internal sabre/dav API's match the terminology from those specifications.
The API's allowed someone to write an implementation that allows a user to
invite another user to their calendar. The others get the invitation and can
accept or decline the invite.</p>

<h2 id="new-standardization-effort">New standardization effort</h2>

<p>In 2014 the sabre/dav project and a couple of other vendors started on a new
effort, with the following primary goals:</p>

<ol>
<li>Standardize the proprietary spec.</li>
<li>Extend the specification to also allow CardDAV (addressbook) sharing to be
implemented.</li>
</ol>

<p>To do this, we've split the standard into 4 separate specifications:</p>

<ol>
<li><a href="https://tools.ietf.org/html/draft-pot-webdav-notifications">draft-pot-webdav-notifications</a>.</li>
<li><a href="https://tools.ietf.org/html/draft-pot-webdav-resource-sharing">draft-pot-webdav-resource-sharing</a>.</li>
<li><a href="https://tools.ietf.org/html/draft-pot-caldav-sharing-00">draft-pot-caldav-sharing</a>.</li>
<li>And a future carddav sharing spec.</li>
</ol>

<p>So in this process we're not only creating a separate CardDAV and CalDAV spec,
but also adding a generic 'WebDAV sharing' spec that can be used by
WebDAV file sharing systems, such as ownCloud.</p>

<p>On a high level the data-model is similar, but almost everywhere new XML
documents have been defined that are more descriptive, more generic or just
better for aesthetic reasons.</p>

<h2 id="the-state-of-sharing-in-sabre%2Fdav-3.2">The state of sharing in sabre/dav 3.2</h2>

<p>The first place where the new specifications will be integrated, is CalDAV.
So 3.2 is also the first place where we actually ship a working implementation.</p>

<p>However, to do this properly, some big changes were made:</p>

<ol>
<li>The internal API is 100% rewritten. All the properties and classes use
terminology matching the <em>new</em> specs and not the old specs.</li>
<li>A lot of the code has been moved from the <code>Sabre\CalDAV</code> to the
<code>Sabre\DAV\Sharing</code> namespace.</li>
</ol>

<p>But, another thing is really important. The new sharing specification allows
two workflows for sharing:</p>

<ol>
<li>Sharing with a notification system. In this approach you can invite someone
to a share, and that person then gets an opportunity to accept, decline or
ignore the invite.</li>
<li>Instant sharing. In this workflow you invite someone, and then that person
immediately has access to the share.</li>
</ol>

<p>The old spec only has support for the first model, and this is true as well
for the sabre/dav implementation.</p>

<p>However, in sabre/dav 3.2 we initially only support model #2. So if you
require the notification system, you can't yet do an upgrade.</p>

<p>We think model #1 is probably more appropriate for public consumer systems,
and #2 works better for systems supporting small teams.</p>

<h2 id="getting-support-for-the-old-specifications">Getting support for the old specifications</h2>

<p>One drawback of using the new specs, is that old clients don't yet understand
them. So we've added a plugin to handle this.</p>

<p>If you add the <code>Sabre\CalDAV\SharingPlugin</code> plugin, this plugin supports the
old apple spec and automatically maps all incoming request to the new model.</p>

<p>This plugin can therefore only work if <code>Sabre\DAV\Sharing\Plugin</code> is <em>also</em>
up and running.</p>

<h2 id="the-old-and-the-new-classes">The old and the new classes</h2>

<p>This table gives you an idea of the old classes and interfaces, and which
classes and interfaces you now need to look at for similar functionality.</p>

<h3 id="%60sabre%5Ccaldav%5Csharingplugin%60"><code>Sabre\CalDAV\SharingPlugin</code></h3>

<p>This class split in two:</p>

<ul>
<li><code>Sabre\DAV\Sharing\Plugin</code></li>
<li><code>Sabre\CalDAV\SharingPlugin</code></li>
</ul>

<h3 id="%60sabre%5Ccaldav%5Cisharablecalendar%60-and-%60sabre%5Ccaldav%5Cisharedcalendar"><code>Sabre\CalDAV\ISharableCalendar</code> and `Sabre\CalDAV\ISharedCalendar</h3>

<p>The old sabre/dav had two node types for shared calendars, one for the
original and one for the shared instances.</p>

<p>The new sabre/dav combines this into a single <code>Sabre\DAV\Sharing\ISharedNode</code>.
Which is used for 'all instances'.</p>

<p>However, there is still <code>Sabre\CalDAV\ISharedCalendar</code> which extends both
<code>Sabre\DAV\Sharing\ISharedNode</code> and <code>Sabre\CalDAV\ICalendar</code>.</p>

<h3 id="%60sabre%5Ccaldav%5Csharedcalendar%60-and-%60sabre%5Ccaldav%5Cshareablecalendar%60"><code>Sabre\CalDAV\SharedCalendar</code> and <code>Sabre\CalDAV\ShareableCalendar</code></h3>

<p>Like the interfaces, the concrete classes also had two distinct nodes. In
the new system, there is just <code>Sabre\CalDAV\SharedCalendar</code>.</p>

<h3 id="%60sabre%5Ccaldav%5Cnotifications%60"><code>Sabre\CalDAV\Notifications</code></h3>

<p>This entire namespace must not be used in sabre/dav 3.2. It doesn't work and
it will go away.</p>

<h3 id="%60sabre%5Ccaldav%5Cbackend%5Csharingsupport%60"><code>Sabre\CalDAV\Backend\SharingSupport</code></h3>

<p>This interface still exists and still has the same goal, but it went through
a number of structual changes. It also no longer <em>requires</em>
<code>Sabre\CalDAV\Backend\NotificationSupport</code> as well.</p>

<h2 id="the-future">The future</h2>

<p>The plan is to implement the notifications engine again, but take a different
approach than we originally did in old sabre/dav versions. The new system
should be better separated from CalDAV and support notifications for different
subsystems (CardDAV, CalDAV, etc).</p>

<p>We will also add support for CardDAV (addressbook) sharing soon.</p>

<p>Hopefully these releases will all be rolled out in 3.3 and 3.4 releases.</p>

<p>My advice for people that <em>require</em> the notification subsystem for now is to
stick to 3.1 until we have a complete replacement. Some shifts will likely
happen until we land on a design we're actually happy with.</p>
]]></content>
        </entry>
    </feed>