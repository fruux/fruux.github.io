<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[sabre.io]]></title>
    <link href="http://sabre.io/atom.xml" rel="self"/>
    <link href="http://sabre.io/"/>
    <updated>2016-10-07T04:46:17+00:00</updated>
    <id>http://sabre.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[sabre/dav 2.1 End of life]]></title>
            <link href="http://sabre.io/blog/2016/sabre-dav-2.1-eol"/>
            <updated>2016-10-07T03:48:20+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-dav-2.1-eol</id>
            <content type="html"><![CDATA[<p>sabre/dav 2.1 is now "end of life". This means that no more bugs will be
fixed, including security bugs.</p>

<p>We've released one final release (<a href="https://github.com/fruux/sabre-dav/releases/tag/2.1.11">2.1.11</a>) with some last final tweaks,
but you're strongly urged to upgrade to at least 3.0, and preferably 3.2.</p>

<p>For more information about the support schedule, and for upgrade instructions,
check out the <a href="/dav/upgrading/">upgrading</a> page.</p>

<p>Because this is the last release to use the (relatively unpopular) sabre/http
3.x package, this also marks sabre/http 3.x as EOL.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/uri 2 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-uri-2.0.0-release"/>
            <updated>2016-10-07T02:55:41+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-uri-2.0.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/uri 2.0. The sole change in this package is that it now
requires PHP 7 and has typehints where appropriate. Upgrading should be
seamless.</p>

<p>Both 1.x and 2.x will be maintained and receive bugfixes.</p>

<p>To upgrade sabre/uri, make sure your <code>composer.json</code> requires "^2.0" for
sabre/uri and run <code>composer update</code>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/event 4 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-event-4.0.0-release"/>
            <updated>2016-09-20T02:42:15+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-event-4.0.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/event 4.0.0.</p>

<p>This release requires PHP 7, and has the following new features:</p>

<ul>
<li>PHP 7 typehints where they make sense, <code>strict_types</code> used everywhere.</li>
<li>Support for a new <code>WildcardEmitter</code> this Emitter has the same interface as
the regular <code>Emitter</code>, but it allows you to listen for events such as
<code>updated:*</code>, which would get triggered for any event that starts with
<code>updated:</code>.</li>
<li><code>EventEmitter</code>, <code>EventEmitterTrait</code> and <code>EventEmitterInterface</code> are renamed
to <code>Emitter</code>, <code>EmitterTrait</code> and <code>EmitterInterface</code>.</li>
<li>Promises now correctly handle PHP 7 <code>Trowable</code>.</li>
<li>Promises <em>must</em> now be rejected by an object implementing <code>Trowable</code>. In the
past it was possible to reject a Promise with any value (like Javascript),
but unlike Javascript, you can't throw a string in PHP. I felt that this
made the Promise a bit more predictable.</li>
</ul>

<h3 id="php-5.5">PHP 5.5</h3>

<p>sabre/event 3 will continue to be supported. I don't suspect new bugs will
appear there though, as it's a fairly simple package.</p>

<p>To upgrade sabre/event, make sure your <code>composer.json</code> requires "^4.0" for
sabre/event.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Baïkal 0.4.6 released]]></title>
            <link href="http://sabre.io/blog/2016/baikal-0.4.6-release"/>
            <updated>2016-08-19T13:12:50+00:00</updated>
            <id>http://sabre.io/blog/2016/baikal-0.4.6-release</id>
            <content type="html"><![CDATA[<p>We just released Baïkal 0.4.6. This release contains a fix that prevented
some users froms syncing contacts, if they were using the SQLite backend.</p>

<p>Upgrading is recommended.</p>

<p>Read the <a href="/baikal/upgrade/" title="Upgrade instructions">upgrade instructions here</a>. Full changelog can be found on <a href="https://github.com/fruux/Baikal/blob/0.4.6/CHANGELOG.md" title="Change log">Github</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/dav 3.2.0 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-dav-3.2.0-release"/>
            <updated>2016-06-28T02:41:55+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-dav-3.2.0-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/dav 3.2.0.
This is a major new version, and we're very excited to bring you features
we've been working on since last winter.</p>

<p>Highlights from this release:</p>

<ul>
<li>Support for <a href="http://www.php-fig.org/psr/psr-3/">PSR-3</a> for logging.</li>
<li>Full support for <a href="https://www.postgresql.org/">PostgreSQL</a>. We require version 9.5.</li>
<li>We're now supporting WebDAV resource sharing.</li>
<li>Calendar sharing now works out of the box!</li>
</ul>

<p>If you're curious, there's a much larger list of features on the
<a href="https://github.com/fruux/sabre-dav/blob/3.2.0/CHANGELOG.md">ChangeLog</a>. If you are upgrading from an older version, be sure to take
a look at the <a href="/dav/upgrade/3.1-to-3.2/">upgrade instructions</a>, as we've made a few backwards
compatibility breaks in order to support the new features.</p>

<p>To get started right away, you can find a zip on the <a href="https://github.com/fruux/sabre-dav/releases">releases</a> page.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Changes to sharing in sabre/dav 3.2]]></title>
            <link href="http://sabre.io/blog/2016/sharing-changes"/>
            <updated>2016-05-29T23:32:29+00:00</updated>
            <id>http://sabre.io/blog/2016/sharing-changes</id>
            <content type="html"><![CDATA[<p>We are currently working on sabre/dav 3.2. <a href="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/trunk/doc/Extensions/caldav-sharing.txt">A first beta has been released</a>.
This release includes major changes to the sharing system.</p>

<p>If you are a user of sabre/dav and have never done any deep modifications to
the sharing system, this simply means that from that version onward, there's
a new calendar sharing feature.</p>

<p>To take advantage of that feature, you can just upgrade and then turn on the
sharing plugin:</p>

<pre><code>$server-&gt;addPlugin(new Sabre\DAV\Sharing\Plugin());
</code></pre>

<p>And to allow Apple clients and BusyCal to modify the list of who can access
your calendar, add the following second plugin:</p>

<pre><code>$server-&gt;addPlugin(new Sabre\CalDAV\SharingPlugin());
</code></pre>

<p>Now if you're completely new to this, you can stop reading this article right
here. However, if you did stuff with sharing before, read on.</p>

<h2 id="the-old-situation">The old situation</h2>

<p>Preliminary support for sharing was added to sabre/dav in version 1.7, which
was released back in 2012. However, this release only ever shipped with the
interfaces to allow an implementor to write a custom backend for this.</p>

<p>There were only a few people that have actually done that. This guide is for
those people.</p>

<p>The specification we used back then were 2 apple proprietary specifications:</p>

<ol>
<li><a href="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/trunk/doc/Extensions/caldav-sharing.txt">caldav-sharing</a>.</li>
<li><a href="http://svn.calendarserver.org/repository/calendarserver/CalendarServer/trunk/doc/Extensions/caldav-notifications.txt">caldav-notifications</a>.</li>
</ol>

<p>The internal sabre/dav API's match the terminology from those specifications.
The API's allowed someone to write an implementation that allows a user to
invite another user to their calendar. The others get the invitation and can
accept or decline the invite.</p>

<h2 id="new-standardization-effort">New standardization effort</h2>

<p>In 2014 the sabre/dav project and a couple of other vendors started on a new
effort, with the following primary goals:</p>

<ol>
<li>Standardize the proprietary spec.</li>
<li>Extend the specification to also allow CardDAV (addressbook) sharing to be
implemented.</li>
</ol>

<p>To do this, we've split the standard into 4 separate specifications:</p>

<ol>
<li><a href="https://tools.ietf.org/html/draft-pot-webdav-notifications">draft-pot-webdav-notifications</a>.</li>
<li><a href="https://tools.ietf.org/html/draft-pot-webdav-resource-sharing">draft-pot-webdav-resource-sharing</a>.</li>
<li><a href="https://tools.ietf.org/html/draft-pot-caldav-sharing-00">draft-pot-caldav-sharing</a>.</li>
<li>And a future carddav sharing spec.</li>
</ol>

<p>So in this process we're not only creating a separate CardDAV and CalDAV spec,
but also adding a generic 'WebDAV sharing' spec that can be used by
WebDAV file sharing systems, such as ownCloud.</p>

<p>On a high level the data-model is similar, but almost everywhere new XML
documents have been defined that are more descriptive, more generic or just
better for aesthetic reasons.</p>

<h2 id="the-state-of-sharing-in-sabre%2Fdav-3.2">The state of sharing in sabre/dav 3.2</h2>

<p>The first place where the new specifications will be integrated, is CalDAV.
So 3.2 is also the first place where we actually ship a working implementation.</p>

<p>However, to do this properly, some big changes were made:</p>

<ol>
<li>The internal API is 100% rewritten. All the properties and classes use
terminology matching the <em>new</em> specs and not the old specs.</li>
<li>A lot of the code has been moved from the <code>Sabre\CalDAV</code> to the
<code>Sabre\DAV\Sharing</code> namespace.</li>
</ol>

<p>But, another thing is really important. The new sharing specification allows
two workflows for sharing:</p>

<ol>
<li>Sharing with a notification system. In this approach you can invite someone
to a share, and that person then gets an opportunity to accept, decline or
ignore the invite.</li>
<li>Instant sharing. In this workflow you invite someone, and then that person
immediately has access to the share.</li>
</ol>

<p>The old spec only has support for the first model, and this is true as well
for the sabre/dav implementation.</p>

<p>However, in sabre/dav 3.2 we initially only support model #2. So if you
require the notification system, you can't yet do an upgrade.</p>

<p>We think model #1 is probably more appropriate for public consumer systems,
and #2 works better for systems supporting small teams.</p>

<h2 id="getting-support-for-the-old-specifications">Getting support for the old specifications</h2>

<p>One drawback of using the new specs, is that old clients don't yet understand
them. So we've added a plugin to handle this.</p>

<p>If you add the <code>Sabre\CalDAV\SharingPlugin</code> plugin, this plugin supports the
old apple spec and automatically maps all incoming request to the new model.</p>

<p>This plugin can therefore only work if <code>Sabre\DAV\Sharing\Plugin</code> is <em>also</em>
up and running.</p>

<h2 id="the-old-and-the-new-classes">The old and the new classes</h2>

<p>This table gives you an idea of the old classes and interfaces, and which
classes and interfaces you now need to look at for similar functionality.</p>

<h3 id="%60sabre%5Ccaldav%5Csharingplugin%60"><code>Sabre\CalDAV\SharingPlugin</code></h3>

<p>This class split in two:</p>

<ul>
<li><code>Sabre\DAV\Sharing\Plugin</code></li>
<li><code>Sabre\CalDAV\SharingPlugin</code></li>
</ul>

<h3 id="%60sabre%5Ccaldav%5Cisharablecalendar%60-and-%60sabre%5Ccaldav%5Cisharedcalendar"><code>Sabre\CalDAV\ISharableCalendar</code> and `Sabre\CalDAV\ISharedCalendar</h3>

<p>The old sabre/dav had two node types for shared calendars, one for the
original and one for the shared instances.</p>

<p>The new sabre/dav combines this into a single <code>Sabre\DAV\Sharing\ISharedNode</code>.
Which is used for 'all instances'.</p>

<p>However, there is still <code>Sabre\CalDAV\ISharedCalendar</code> which extends both
<code>Sabre\DAV\Sharing\ISharedNode</code> and <code>Sabre\CalDAV\ICalendar</code>.</p>

<h3 id="%60sabre%5Ccaldav%5Csharedcalendar%60-and-%60sabre%5Ccaldav%5Cshareablecalendar%60"><code>Sabre\CalDAV\SharedCalendar</code> and <code>Sabre\CalDAV\ShareableCalendar</code></h3>

<p>Like the interfaces, the concrete classes also had two distinct nodes. In
the new system, there is just <code>Sabre\CalDAV\SharedCalendar</code>.</p>

<h3 id="%60sabre%5Ccaldav%5Cnotifications%60"><code>Sabre\CalDAV\Notifications</code></h3>

<p>This entire namespace must not be used in sabre/dav 3.2. It doesn't work and
it will go away.</p>

<h3 id="%60sabre%5Ccaldav%5Cbackend%5Csharingsupport%60"><code>Sabre\CalDAV\Backend\SharingSupport</code></h3>

<p>This interface still exists and still has the same goal, but it went through
a number of structual changes. It also no longer <em>requires</em>
<code>Sabre\CalDAV\Backend\NotificationSupport</code> as well.</p>

<h2 id="the-future">The future</h2>

<p>The plan is to implement the notifications engine again, but take a different
approach than we originally did in old sabre/dav versions. The new system
should be better separated from CalDAV and support notifications for different
subsystems (CardDAV, CalDAV, etc).</p>

<p>We will also add support for CardDAV (addressbook) sharing soon.</p>

<p>Hopefully these releases will all be rolled out in 3.3 and 3.4 releases.</p>

<p>My advice for people that <em>require</em> the notification subsystem for now is to
stick to 3.1 until we have a complete replacement. Some shifts will likely
happen until we land on a design we're actually happy with.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/dav 3.1.4 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-dav-3.1.4-release"/>
            <updated>2016-05-29T01:05:59+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-dav-3.1.4-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/dav 3.1.4.</p>

<p>This release improves CardDAV sync performance. For large addressbooks, the
initial sync can be up to 50% faster.</p>

<p>Upgrade sabre/dav by running:</p>

<pre><code>composer update sabre/dav
</code></pre>

<p>Or download the zip from the <a href="https://github.com/fruux/sabre-dav/releases">releases</a> page.</p>

<p>Full changelog can be found on <a href="https://github.com/fruux/sabre-dav/blob/3.1.4/CHANGELOG.md">Github</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Upcoming changes to iCalendar and vCard validation in sabre/dav 3.2.]]></title>
            <link href="http://sabre.io/blog/2016/validation-changes"/>
            <updated>2016-05-23T22:34:07+00:00</updated>
            <id>http://sabre.io/blog/2016/validation-changes</id>
            <content type="html"><![CDATA[<p>We are currently working on sabre/dav 3.2. <a href="https://github.com/fruux/sabre-dav/releases">A first beta has been released</a>.
This release will include some changes to validating iCalendar and vCard.
These changes might impact you if you use the Card- and CalDAV systems, or if
you are a developer for a Cal/CardDAV client.</p>

<p>In the past we've been pretty lenient in terms of what kind of data you can
send the server. Originally the idea for this was to follow Postel's law, e.g.:</p>

<blockquote>
  <p>Be conservative in what you send, be liberal in what you accept</p>
</blockquote>

<p>I actually believe that Postel's law and following it is <em>not</em> a good idea and
will actually over time cause networks to become less and less compliant.</p>

<p>So starting 3.2 we are dialing up the strictness of the server. The component
inside of sabre/dav responsible for parsing iCalendar and vCard has had a
validation system for a while. sabre/dav now uses that system when you <code>PUT</code>
a new iCalendar object or vCard.</p>

<p>The system is not yet 100% complete, so it will not yet throw errors on every
invalid object, but over time we will make this more strict by adding new
validation rules.</p>

<h2 id="how-it-works">How it works</h2>

<p>One of the biggest areas in validation is that we're now checking for
properties that are required, and how many instances of properties may
appear.</p>

<p>For example, in iCalendar the <code>PRODID</code> is <em>required</em> to appear in the
top-level iCalendar object.</p>

<p>In that particular case, the system is actually able to repair the incoming
object. It will simply add a default <code>PRODID</code>.</p>

<p>A request for this might look as follows:</p>

<pre><code>PUT /calendars/user/calendar/new-object.ics
Content-Type: text/calendar

BEGIN:VCALENDAR
BEGIN:VEVENT
UID:foo-bar
DTSTAMP:20160523T181200Z
DTSTART:20160524T090000Z
SUMMARY:Meeting
END:VEVENT
END:VCALENDAR
</code></pre>

<p>Since <code>PRODID</code> is missing, sabre/dav will do the folowing:</p>

<ol>
<li>It will automatically add a <code>PRODID</code></li>
<li>It will <strong>no longer</strong> send back an <code>ETag</code> header after the request.</li>
<li>It adds an <code>X-Sabre-Ew-Gross</code> header. This header is an indicator something
was not right in the request, along with a description for a developer what
was wrong with it.</li>
</ol>

<p>The reason we're <em>not</em> returning an <code>ETag</code> is because we have to make
modifications to the object. Not returning an <code>ETag</code> pretty much tells the
client: you must do a <code>GET</code> request after your <code>PUT</code> to find out the current
state of the object and the correct <code>ETag</code>. Fortunately, most clients do this
correctly.</p>

<p>It also works well as a small punishment to a client. They are forced to do an
extra HTTP request, so there is an incentive to fix the bug.</p>

<h2 id="when-we-can%27t-do-a-repair">When we can't do a repair</h2>

<p>There are many cases where we can't guess what the developer's intent was. For
example: every <code>VEVENT</code> must have a <code>DTSTART</code>. If it didn't appear, we can't
really just make one up.</p>

<p>For situations like that, we now always emit HTTP error
<code>415 Unsupported Media Type</code>, along with our <code>X-Sabre-Ew-Gross</code> header.</p>

<h2 id="requesting-strict-handling">Requesting strict handling</h2>

<p>There are also cases where a client developer does not want the server to
automatically repair the object, and instead always do a hard failure when
the server deems an object invalid. This might be especially handy during
development.</p>

<p>To tell the server to always do hard failures, you can simply include the
standard <code>Prefer: handling=strict</code> HTTP header in your PUT requests.</p>

<h2 id="there-are-likely-going-to-be-compatibility-problems">There are likely going to be compatibility problems</h2>

<p>Because we are becoming more strict, it is likely that there are CalDAV and
CardDAV clients that stop working, because they were sending us invalid data.</p>

<p>To deal with this, we are doing the following:</p>

<ol>
<li>We're testing popular clients to see if they have problems.</li>
<li>If we run into those problems, we try to contact the developer of the
client to see if they are able to fix it.</li>
<li>If they are not fixing the problem, or if we determine that there will be
many users stuck on an old version of their client, we will try to see if
we can add an 'automatic repair' rule to the validation system.</li>
</ol>

<p>The automatic repair will account for most, if not all client bugs, but if we
do run into an issue with a client that will not behave correctly if we don't
return an ETag, and the developer is unwilling to fix the problem (or enough
users can't upgrade) we will consider a client-specific workaround, preferably
based on the <code>User-Agent</code>.</p>

<p>However, we can't test every client on the face of the planet. So we're hoping
developers and users of clients will test sabre/dav 3.2 with their software and
report issues they run into.</p>

<p>Because we completely assume that we <em>will</em> run into new compatibility issues,
and we also completely assume that not every client will be tested when the
3.2 release hits the floor, we recommend users of sabre/dav to test
CalDAV/CardDAV clients they support before upgrading, or waiting a few point
releases so the dust can settle.</p>

<h2 id="contact-us">Contact us</h2>

<p>Are you running into a compatibility issue? <a href="https://github.com/fruux/sabre-dav/issues/new">Contact us via our Github
issue tracker</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/vobject 3.5.3 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-vobject-3.5.3-release"/>
            <updated>2016-04-07T04:44:03+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-vobject-3.5.3-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/vobject 3.5.3.</p>

<p>This release fixes a problem with recurring events that have overridden
instances falling on the same day.</p>

<p>Upgrade sabre/vobject by running:</p>

<pre><code>composer update sabre/vobject
</code></pre>

<p>Full changelog can be found on <a href="https://github.com/fruux/sabre-vobject/blob/3.5.3/Changelog.md">Github</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[sabre/dav 3.1.3 released]]></title>
            <link href="http://sabre.io/blog/2016/sabre-dav-3.1.3-release"/>
            <updated>2016-04-07T01:10:02+00:00</updated>
            <id>http://sabre.io/blog/2016/sabre-dav-3.1.3-release</id>
            <content type="html"><![CDATA[<p>We just released sabre/dav 3.1.3. This release contains the following changes:</p>

<ul>
<li>We now require libxml 2.7.0 in composer. We always needed this as a minumum
version, but this was not correctly marked.</li>
<li>Fixed an issue in the MySQL table structure for calendars. There was not
enough space to make a calendar to be able to hold events, todos and
journals all at once.</li>
<li>Upgraded sabre/vobject, this will fix a number of scheduling-related bugs.</li>
</ul>

<p>Upgrade sabre/dav by running:</p>

<pre><code>composer update sabre/dav
</code></pre>

<p>Or download the zip from the <a href="https://github.com/fruux/sabre-dav/releases">releases</a> page.</p>

<p>Full changelog can be found on <a href="https://github.com/fruux/sabre-dav/blob/3.1.3/CHANGELOG.md">Github</a></p>
]]></content>
        </entry>
    </feed>